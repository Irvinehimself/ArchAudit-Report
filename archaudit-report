#!/bin/bash

###############################################
# Copyright (C) 2017  Irvine McMinn (irvine mcminn at gmail dot com)
#
# A tool to produce a report of how the top level applications are
# affected by vulnerabilities reported by arch-audit. The project home
# page can be found at https://github.com/Irvinehimself/ArchAudit-Report
#
# ArchAudit-Report is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ArchAudit-Report is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ArchAudit-Report.  If not, see <http://www.gnu.org/licenses/>.
###############################################

### ### ### Dependencies ### ### ###

### arch-audit (community)
### whoneeds (pkgtools AUR  https://aur.archlinux.org/packages/pkgtools/)

# Note: I could use 'pactree -r pckg' instead of 'whoneeds', but 'whoneeds'
# gives a much cleaner, more easily customised output. More specifically,
# 'pactree' gives a great visual representation of the dependency tree,
# (I use it myself,) but, for report building, using 'whoneeds' means cleaner
# code.

### ### ### End Dependencies ### ### ###


### ### ### ### ### ### ### Start Constants ### ### ### ### ### ### ###

### ### Links
ArchSecurity="https://security.archlinux.org/"
PckgIssue="https://security.archlinux.org/package/"
GnuLicence="http://www.gnu.org/licenses/"


### ### Paths and tmp file names
PathToTemp="/tmp/"

### Records
PckgListFile="$PathToTemp""PckgListTmp.txt"         ### Format = ':PckgName:PkgUpDtStatus:RskClr:PckgRsk:SortRisk:DepCount'
AppListFile="$PathToTemp""AppListTmp.txt"           ### Format = ':AppNme:C:H:M:L:U'

### ### Counters
AdvisCountFile="$PathToTemp""AdvisCountTmp.txt"
CrtclAdvisCountFile="$PathToTemp""CrtclAdvisCountTmp.txt"
HighAdvisCountFile="$PathToTemp""HighAdvisCountTmp.txt"
MediumAdvisCountFile="$PathToTemp""MediumAdvisCountTmp.txt"
LowAdvisCountFile="$PathToTemp""LowAdvisCountTmp.txt"
UndefAdvisCountFile="$PathToTemp""UndefAdvisCountTmp.txt"

AppCountFile="$PathToTemp""AppCountTmp.txt"
CrtclAppCountGFile="$PathToTemp""CrtclAppCountGTmp.txt"
CrtclAppCountNFile="$PathToTemp""CrtclAppCountNTmp.txt"
HighAppCountGFile="$PathToTemp""HighAppCountGTmp.txt"
HighAppCountNFile="$PathToTemp""HighAppCountNTmp.txt"
MediumAppCountGFile="$PathToTemp""MediumAppCountGTmp.txt"
MediumAppCountNFile="$PathToTemp""MediumAppCountNTmp.txt"
LowAppCountGFile="$PathToTemp""LowAppCountGTmp.txt"
LowAppCountNFile="$PathToTemp""LowAppCountNTmp.txt"
UndefAppCountGFile="$PathToTemp""UndefAppCountGTmp.txt"
UndefAppCountNFile="$PathToTemp""UndefAppCountNTmp.txt"

CrtclAppListFile="$PathToTemp""CrtclAppListTmp.txt"
HighAppListFile="$PathToTemp""HighAppListTmp.txt"
MediumAppListFile="$PathToTemp""MediumAppListTmp.txt"
LowAppListFile="$PathToTemp""LowAppListTmp.txt"
UndefAppListFile="$PathToTemp""UndefAppListTmp.txt"

### ### End Paths and tmp file names

### ### Text colour definitions
# (For an expansive colour chart see http://misc.flogisoft.com/bash/tip_colors_and_formatting)
BldFce='\e[1m'
PkgClr='\e[01;32m'          # green
PckgUpDateClr='\e[38;5;33m' # purple-ish
DefClr='\e[0m'              # Default white colour
LowRsk='\e[38;5;148m'       # green yellow
MedRsk='\e[38;5;11m'        # light yellow
HighRsk='\e[38;5;208m'      # orange red
CrtclRsk='\e[01;31m'        # red
UnDefRsk='\e[38;5;218m'     # light pink
HypLnk='\e[01;36m'          # light cyan
NoteClr='\e[38;5;81m'       # pale blue
AppClr='\e[38;5;104m'       # light mauve

### ### Char constants ### ###
SpChr=" "           # Used to highlight an added space in strings
ScrnWidth="120"     # Assumed screen width of 120 char
TbleWidth="118"     # Allows 2 char for a blank space each side of table
LineLength="116"    # Allows 2 char for table borders

### ### ### ### ### ### ### End Constants ### ### ### ### ### ###



### ### ### ### ### ### ### Start Functions ### ### ### ### ### ### ###

### ### ### ###  Prettification functions ### ### ### ###

### ### ### Lines, Boxes and Tables ### ### ###

function DrawLine() {
    ### see https://stackoverflow.com/questions/5799303/print-a-character-repeatedly-in-bash
    # Note, extended charset seems to be of different length?
    DrawLength="$1"
    DrawChar="$2"
    if [[ "$DrawLength" == "" ]] ; then
        DrawLength="120"
    fi
    if [[ "$DrawChar" == "" ]] ; then
        DrawChar="*"
    fi
    DrwLne=$(printf '%-'"$DrawLength"'s' "$DrawChar")
    echo "${DrwLne// /$DrawChar}"
}

function PrintFBoxLine() {
    printf "$DefClr"
    printf "─"
}

function PrintFBoxEdge() {
    printf "$DefClr"
    printf "│"
}

function PrintFLeftTopCorn() {
    printf "$DefClr"
    printf "┌"
}

function PrintFRghtTopCorn() {
    printf "$DefClr"
    printf "┐"
}

function PrintFLeftBtmCorn() {
    printf "$DefClr"
    printf "└"
}

function PrintFRghtBtmCorn() {
    printf "$DefClr"
    printf "┘"
}

function PrintFLeftJunction() {
    printf "$DefClr"
    printf "├"
}

function PrintFRghtJunction() {
    printf "$DefClr"
    printf "┤"
}

function PrintFTopJunction() {
    printf "$DefClr"
    printf "┬"
}

function PrintFBtmJunction() {
    printf "$DefClr"
    printf "┴"
}

function PrintFCrssJunction() {
    printf "$DefClr"
    printf "┼"
}

function PrintFSpace() {
    printf "$SpChr"
}

function PrintFNewline() {
    printf '%s\n'
}

function PrintFColour() {
    printf "$1"
    # Essentially, the length/justify parameter, $3, is optional
    # ie compare-- PrintFColour "$NoteClr" "$AboutNoFormat" --with-- PrintFColour "$RiskClr" "$PckgRsk" '%15s --'
    if [[ "$3" == "" ]] ; then
            printf "$2"
        else
                printf "$3" "$2"
    fi
    printf "$DefClr"
}

function DrawBoxTopLine(){
    BoxLine=$(DrawLine "$TbleWidth" "─")
    ### Top box outline
    PrintFSpace
    PrintFLeftTopCorn
    printf "$BoxLine"
    PrintFRghtTopCorn
    PrintFNewline
}

function DrawBoxBottomLine(){
    BoxLine=$(DrawLine "$TbleWidth" "─")
    ### Bottom box outline
    PrintFSpace
    PrintFLeftBtmCorn
    printf "$BoxLine"
    PrintFRghtBtmCorn
    PrintFNewline
}

function DrawBoxJunctionLine(){
    BoxLine=$(DrawLine "$TbleWidth" "─")
    ### Junction box outline
    PrintFSpace
    PrintFLeftJunction
    printf "$BoxLine"
    PrintFRghtJunction
    PrintFNewline
}

function DrawEmptyLine() {
    PrintFSpace
    PrintFBoxEdge
    printf '%'"$LineLength"'s'
    PrintFBoxEdge
    PrintFNewline
}

### ### ### End  Lines, Boxes and Tables ### ### ###


### ### ### Titles and Notes ### ### ###

function MakeTitleBox() {
    echo
    ### Calculate position of end of string for it to be in centre of a $ScrnWidth char wide terminal
    Title="$1"
    TitleSize=${#Title}
    MidStart=$((ScrnWidth-TitleSize))
    MidStart=$((MidStart / 2))
    LineEnd=$((MidStart+TitleSize))
    ###
    UnderLine=$(DrawLine "$TitleSize" "=")
    PrintFColour "$BldFce" "$Title" '%'"$LineEnd"'s'
    PrintFNewline
    PrintFColour "$BldFce" "$UnderLine" '%'"$LineEnd"'s'
    PrintFNewline
}

function TitleDate() {
    echo
    echo
    MakeTitleBox "ArchAudit WhoNeeds Report:   $(date)"
    echo
    echo
    PrintFColour "$BldFce" "Raw arch-audit results:"
    PrintFNewline
    echo
    # Pipe wordwraps output at $ScrnWidth char. -s option forces break at nearest space. Note trailing -
    arch-audit | fold -sw "$ScrnWidth" -
}

function Information() {
    ### Calculate the mid point for version string, (remeber version string is set by my UpdateGit bash)
    AboutNoFormat="About:"
    AbtNFsze=${#AboutNoFormat}
    AboutVersion="$SpChr""ArchAudit-Report v1.05"
    AboutString="$AboutNoFormat$AboutVersion"
    AboutSize=${#AboutString}
    MidStart=$((LineLength-AboutSize))
    MidStart=$((MidStart / 2))
    LineEnd=$((LineLength-AbtNFsze-MidStart))
    ### Remmember, we need to allow for 'About:' already being printed.See below.
    echo
    echo "Information:"
    ### AboutBox
    DrawBoxTopLine
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$MidStart"'s'
    PrintFColour "$NoteClr" "$AboutNoFormat"
    printf '%-'"$LineEnd"'s' "$AboutVersion"
    PrintFBoxEdge
    PrintFNewline
    DrawBoxJunctionLine
    DrawEmptyLine
    ### WarningBox
    PrintFSpace
    PrintFBoxEdge
    PrintFColour "$CrtclRsk" "$SpChr""Warning:"
    printf '%-107s' "$SpChr""This utility is meant to give an overview of which applications are affected by Arch Linux security"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$LineLength"'s' "$SpChr""advisories. It is not meant to be a measure of how secure a system is. To measure the overall level of system"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$LineLength"'s' "$SpChr""hardness, use Lynis or some other security auditing tool."
    PrintFBoxEdge
    PrintFNewline
    DrawEmptyLine
    ### Note on Monospace
    PrintFSpace
    PrintFBoxEdge
    PrintFColour "$NoteClr" "$SpChr""Note:"
    printf '%-110s' "$SpChr""Particularly when exporting to a text editor, for the pretty columns to line up, you need to set the"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$LineLength"'s' "$SpChr""preferred font to Monospace. In the same vein, I expect the terminal to have a column width of at least 120"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$LineLength"'s' "$SpChr""characters."
    PrintFBoxEdge
    PrintFNewline
    DrawEmptyLine
    ### License
    PrintFSpace
    PrintFBoxEdge
    PrintFColour "$NoteClr" "$SpChr""License:"
    printf '%-107s' "$SpChr""This software is distributed under the GPL v3 license in the hope that it will be useful, but WITHOUT ANY"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf '%-'"$LineLength"'s' "$SpChr""WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU"
    PrintFBoxEdge
    PrintFNewline
    ###
    PrintFSpace
    PrintFBoxEdge
    printf "$SpChr""General Public License for more details:"
    PrintFColour "$HypLnk" "$SpChr""$GnuLicence"
    printf '%-46s'
    PrintFBoxEdge
    PrintFNewline
    DrawEmptyLine
    ###
    DrawBoxBottomLine
}

### ### ### End Titles and Notes ### ### ###


### ### ### Get, Save and Remove Files ### ### ###

function GetTrueAppCounts() {
    AppCount=$(cat "$AppCountFile")
    CrtclAppCountG=$(cat "$CrtclAppCountGFile")
    CrtclAppCountN=$(cat "$CrtclAppCountNFile")
    HighAppCountG=$(cat "$HighAppCountGFile")
    HighAppCountN=$(cat "$HighAppCountNFile")
    MediumAppCountG=$(cat "$MediumAppCountGFile")
    MediumAppCountN=$(cat "$MediumAppCountNFile")
    LowAppCountG=$(cat "$LowAppCountGFile")
    LowAppCountN=$(cat "$LowAppCountNFile")
    UndefAppCountG=$(cat "$UndefAppCountGFile")
    UndefAppCountN=$(cat "$UndefAppCountNFile")
}

function SaveTrueAppCounts() {
    echo "$AppCount" > "$AppCountFile"
    echo "$CrtclAppCountG" > "$CrtclAppCountGFile"
    echo "$CrtclAppCountN" > "$CrtclAppCountNFile"
    echo "$HighAppCountG" > "$HighAppCountGFile"
    echo "$HighAppCountN" > "$HighAppCountNFile"
    echo "$MediumAppCountG" > "$MediumAppCountGFile"
    echo "$MediumAppCountN" > "$MediumAppCountNFile"
    echo "$LowAppCountG" > "$LowAppCountGFile"
    echo "$LowAppCountN" > "$LowAppCountNFile"
    echo "$UndefAppCountG" > "$UndefAppCountGFile"
    echo "$UndefAppCountN" > "$UndefAppCountNFile"
}

function GetTrueAdvisCount() {
    AdvisCount=$(cat "$AdvisCountFile")
    CrtclAdvisCount=$(cat "$CrtclAdvisCountFile")
    HighAdvisCount=$(cat "$HighAdvisCountFile")
    MediumAdvisCount=$(cat "$MediumAdvisCountFile")
    LowAdvisCount=$(cat "$LowAdvisCountFile")
    UndefAdvisCount=$(cat "$UndefAdvisCountFile")
}

function SaveTrueAdvisCount() {
    echo "$AdvisCount" > "$AdvisCountFile"
    echo "$CrtclAdvisCount" > "$CrtclAdvisCountFile"
    echo "$HighAdvisCount" > "$HighAdvisCountFile"
    echo "$MediumAdvisCount" > "$MediumAdvisCountFile"
    echo "$LowAdvisCount" > "$LowAdvisCountFile"
    echo "$UndefAdvisCount" > "$UndefAdvisCountFile"
}

function RemoveTemporaryFiles() {
    rm "$AdvisCountFile"
    rm "$CrtclAdvisCountFile"
    rm "$HighAdvisCountFile"
    rm "$MediumAdvisCountFile"
    rm "$LowAdvisCountFile"
    rm "$UndefAdvisCountFile"
    rm "$AppCountFile"
    rm "$CrtclAppCountGFile"
    rm "$CrtclAppCountNFile"
    rm "$HighAppCountGFile"
    rm "$HighAppCountNFile"
    rm "$MediumAppCountGFile"
    rm "$MediumAppCountNFile"
    rm "$LowAppCountGFile"
    rm "$LowAppCountNFile"
    rm "$UndefAppCountGFile"
    rm "$UndefAppCountNFile"
    rm "$AppListFile"
    if [ -a "$CrtclAppListFile" ] ; then
        rm "$CrtclAppListFile"
    fi
    if [ -a "$HighAppListFile" ] ; then
        rm "$HighAppListFile"
    fi
    if [ -a "$MediumAppListFile" ] ; then
        rm "$MediumAppListFile"
    fi
    if [ -a "$LowAppListFile" ] ; then
        rm "$LowAppListFile"
    fi
    if [ -a "$UndefAppListFile" ] ; then
        rm "$UndefAppListFile"
    fi
    rm "$PckgListFile"
}

### ### ### End Get, Save and Remove Files ### ### ###



### ### ### ### ### ### Report Summary ### ### ### ### ### ###

### ### ### PckgList Stuff ### ### ###

function DrawPckgListTableHeader() {
    echo "Here is a ranked list of the advisories that affect you:"
    DrawBoxTopLine
    ### Text line
    PrintFSpace
    PrintFBoxEdge
    printf '%-29s' "$SpChr""Package"
    printf '%-6s'
    printf '%-8s' "Risk"
    printf '%-5s' "Hits"
    printf '%-19s'
    printf '%-49s' "Advisory"
    PrintFBoxEdge
    PrintFNewline
    DrawBoxJunctionLine
}

function DrawPckgListTableFooter(){
    Advis="advisory"
    DrawBoxJunctionLine
    ### Text line
    PrintFSpace
    PrintFBoxEdge
    printf '%-50s' "$SpChr""For details on all Arch Linux advisories, visit:"
    PrintFColour "$HypLnk" "$ArchSecurity$Advis" '%-66s'
    PrintFBoxEdge
    PrintFNewline
    DrawBoxJunctionLine
    ### Text line
    PrintFSpace
    PrintFBoxEdge
    printf "$SpChr""For details of advisories fixed by an update, (indcated by: '"
    PrintFColour "$PckgUpDateClr" ">>"
    printf "',) see the relevant package advisory above."
    printf '%-8s'
    PrintFBoxEdge
    PrintFNewline
    DrawBoxBottomLine
}

function GetPckgList() {
    echo
    DrawPckgListTableHeader
    ### PckgRecord consists of the fields ':PckgName:PkgUpDtStatus:RiskClr:PckgRsk:SortRisk:PckgAppCount'
    ### Note: The 1st field is empty. Other records in this bash use the empty field trick to wrap the package name in
    ### double colons. This is to avoid confusing 'Doe' with 'Jane-Doe'/'John-Doe'. Technical, (with this particular
    ### record,) that consideration is not a problem. But, by adopting the convention bash wide, it greatly simplifies
    ### understanding the code and leaves room for future development
    ###
    ### 'sort -t: -nr  -k6,6 -k7,7  "$PckgListFile" ' will sort the file by the 6th, '-k6' and 7th '-k7' field.
    ### The option '-t:' signifies that ':' is to be the field  separator.
    sort -t: -nr  -k6,6 -k7,7 "$PckgListFile" |\
    while read -r PckgRecord; do
        ### Note the 5th field, SortRisk, is only for numeric sorting.
        PckgName="$(echo $PckgRecord | cut -d':' -f2)"
   PkgUpDtStatus="$(echo $PckgRecord | cut -d':' -f3)"
         RiskClr="$(echo $PckgRecord | cut -d':' -f4)"
         PckgRsk="$(echo $PckgRecord | cut -d':' -f5)"
        SortRisk="$(echo $PckgRecord | cut -d':' -f6)"  ### Note this field is used purely for numeric sorting
        AppCount="$(echo $PckgRecord | cut -d':' -f7)"
        #
        PrintFSpace; PrintFBoxEdge;
        if [[ "$PkgUpDtStatus" == "$PkgClr" ]] ; then
                UpDtYesNo="$SpChr$PckgName"
            else
                    UpDtYesNo="$SpChr"">>""$PckgName"
        fi
        PrintFColour "$PkgUpDtStatus" "$UpDtYesNo" '%-28s'
        PrintFColour "$RiskClr" "$PckgRsk" '%15s'
        printf '%4s' "$AppCount"
        PrintFColour "$HypLnk" "$SpChr$PckgIssue$PckgName" '%-69s'
        PrintFBoxEdge; PrintFNewline
    done
    DrawPckgListTableFooter
    echo # create line break
}

### ### ###  End PckgList Stuff ### ### ###


### ### ###  AppList stuff ### ### ###

function DrawAppListTableHeader() {
    echo "Finally, here is a ranked list of affected applications:"
    ### Top box outline
    DrawBoxTopLine
    ### Text line
    PrintFSpace
    PrintFBoxEdge
    printf '%-45s' "$SpChr""Application"
    printf '%-12s' "Risk Tally"
    printf '%-47s' "$SpChr$SpChr""Application"
    printf '%-12s' "Risk Tally"
    PrintFBoxEdge
    PrintFNewline
    DrawBoxJunctionLine
}

function AppListPrintF() {
    PrintFColour "$AppClr" "$SpChr$AppNme" '%-43s'
    PrintFColour "$CrtclRsk" "$AppFC" '%3s'
    PrintFColour "$HighRsk"  "$AppFH" '%3s'
    PrintFColour "$MedRsk"   "$AppFM" '%3s'
    PrintFColour "$LowRsk"   "$AppFL" '%3s'
    PrintFColour "$UnDefRsk" "$AppFU" '%3s'
}

function GetApplist() {
    echo
    DrawAppListTableHeader
    ### Record field is ':AppName:C:H:M:L:U'
    ### Note: To avoid confusing AppNames like: 'git', 'jstest-gtk-git' and 'sdl2-jstest-git'. we
    ### need to make the first field empty. That way, we can fully encapsulate '$Appname' in colons
    ### and thus eliminate false positives, (touch wood.)
    sort -t: -nr -k3,3 -k4,4 -k5,5 -k6,6 -k7,7  "$AppListFile" |\
    ( # Open pipe
    Column="1"
    while read -r AppListRecord; do
        AppNme="$(echo $AppListRecord | cut -d':' -f2) "  # Isolate the 1st field
         AppFC="$(echo $AppListRecord | cut -d':' -f3) "  # Isolate the 2nd field
         AppFH="$(echo $AppListRecord | cut -d':' -f4) "  # Isolate the 3rd field
         AppFM="$(echo $AppListRecord | cut -d':' -f5) "  # Isolate the 4th field
         AppFL="$(echo $AppListRecord | cut -d':' -f6) "  # Isolate the 5th field
         AppFU="$(echo $AppListRecord | cut -d':' -f7) "  # Isolate the 6th field
        ###
        if [[ "$Column" == "1" ]] ; then
                Column=$((Column + 1))
                PrintFSpace
                PrintFBoxEdge
                AppListPrintF
            else
                    Column="1"
                    AppListPrintF
                    PrintFBoxEdge
                    PrintFNewline
        fi
    done
    if [[ "$Column" == "2" ]] ; then    # If the last row is incomplete, we need to finsh the row
        printf '%58s'
        PrintFBoxEdge
        PrintFNewline
    fi
    DrawBoxBottomLine
    ) # Close pipe
}

### ### ###  End AppList stuff ### ### ###


### ### ###  AdvsList stuff ### ### ###

function SummaryTableIndent() {
    printf '%42s'
}

function SummaryTableHeader(){
    BoxLine1=$(DrawLine "23" "─")
    BoxLine2=$(DrawLine "14" "─")
    BoxLine3=$(DrawLine "6" "─")
    BoxLine4=$(DrawLine "18" "─")
    BoxLine5=$(DrawLine "8" "─")
    BoxLine6=$(DrawLine "7" "─")
    ### Top box line
    SummaryTableIndent
    PrintFLeftTopCorn
    printf "$BoxLine1"
    PrintFTopJunction
    printf "$BoxLine2"
    PrintFRghtTopCorn
    PrintFNewline
    ### Top header line
    SummaryTableIndent
    PrintFBoxEdge
    printf '%5s'
    printf '%-16s' "Advisories"
    PrintFBoxEdge
    printf "Apllications"
    PrintFBoxEdge
    PrintFNewline
    ### Middle box line
    SummaryTableIndent
    PrintFLeftJunction
    printf "$BoxLine3"
    PrintFTopJunction
    printf "$BoxLine4"
    PrintFCrssJunction
    printf "$BoxLine5"
    PrintFTopJunction
    printf "$BoxLine6"
    PrintFRghtJunction
    PrintFNewline
    ### Bottom header line
    SummaryTableIndent
    PrintFBoxEdge
    printf '%4s' "Hits"
    PrintFBoxEdge
    printf '%6s'
    printf '%-10s' "Risk"
    PrintFBoxEdge
    printf '%1s'
    printf '%-5s' "Net"
    PrintFBoxEdge
    printf "Gross"
    PrintFBoxEdge
    PrintFNewline
    ### Bottom box line
    SummaryTableIndent
    PrintFLeftJunction
    printf "$BoxLine3"
    PrintFBtmJunction
    printf "$BoxLine4"
    PrintFBtmJunction
    printf "$BoxLine5"
    PrintFBtmJunction
    printf "$BoxLine6"
    PrintFRghtJunction
    PrintFNewline

}

function SummaryTableFooter(){
    BoxLine=$(DrawLine "36" "─")
    SummaryTableIndent
    PrintFLeftBtmCorn
    printf "$BoxLine"
    PrintFRghtBtmCorn
    PrintFNewline
}

function SummaryPrintF() {
    SummaryTableIndent
    PrintFBoxEdge
    printf '%-4s' "$SpChr$1"            # Advisory count
    PrintFColour "$2" "$3" '%16s'       # RiskColour  RiskString Spacing
    printf '%7s' "$4""$SpChr"           # Net AppCount
    printf '%7s' "$5""$SpChr"           # Gross Appcount
    PrintFBoxEdge
    PrintFNewline
}

function GetSummaryList(){
    echo
    echo -e "There were $AdvisCount relevant advisories affecting a net count of $AppCount applications:"
    SummaryTableHeader
    ### Critical ###
    SummaryPrintF "$CrtclAdvisCount" "$CrtclRsk" "Critical Risk!" "$CrtclAppCountN" "$CrtclAppCountG"
    ### High ###
    SummaryPrintF "$HighAdvisCount" "$HighRsk" "High Risk!" "$HighAppCountN" "$HighAppCountG"
    ### Medium ###
    SummaryPrintF "$MediumAdvisCount" "$MedRsk" "Medium Risk!" "$MediumAppCountN" "$MediumAppCountG"
    ### Low ###
    SummaryPrintF "$LowAdvisCount" "$LowRsk" "Low Risk!" "$LowAppCountN" "$LowAppCountG"
    ### Undefined ###
    SummaryPrintF "$UndefAdvisCount" "$UnDefRsk" " Undefined Risk!" "$UndefAppCountN" "$UndefAppCountG"
    ### ### ###
    SummaryTableFooter
    #
    PrintFColour "$NoteClr" "Note on gross and net counts:" '%34s'
    printf '%76s\n' "Applications have multiple dependencies. If an applications has two or more"
    printf '%114s\n' "dependencies with advisories, double counting gives an inflated count of affected applications. Even so, this"
    printf '%114s\n' "'gross' count still contains valuable information. On the other hand, the 'net' count,  which does not double"
    printf '%85s\n' "count, may be considered a true count of applications with inherited advisories."
    ###
    echo
}

### ### ### End AdvsList stuff ### ### ###

function ReportSummary() {
    # Recover values from sub-shell pipes
    GetTrueAdvisCount
    GetTrueAppCounts
    # Commence report summary
    MakeTitleBox "Summary"
    GetSummaryList
    GetPckgList
    GetApplist
    MakeTitleBox "End Report"
    # Clean up temporary files
    RemoveTemporaryFiles
}

### ### ### ### ### ### End Report Summary ### ### ### ### ### ###



### ### ### ### ### ### Parser functions ### ### ### ### ### ###

function InialiseCounters() {
    ###
    AdvisCount="0"
    CrtclAdvisCount="0"
    HighAdvisCount="0"
    MediumAdvisCount="0"
    LowAdvisCount="0"
    UndefAdvisCount="0"
    ###
    AppCount="0"
    echo "$AppCount" > "$AppCountFile"
    CrtclAppCountG="0"
    echo "$CrtclAppCountG" > "$CrtclAppCountGFile"
    CrtclAppCountN="0"
    echo "$CrtclAppCountN" > "$CrtclAppCountNFile"
    HighAppCountG="0"
    echo "$HighAppCountG" > "$HighAppCountGFile"
    HighAppCountN="0"
    echo "$HighAppCountN" > "$HighAppCountNFile"
    MediumAppCountG="0"
    echo "$MediumAppCountG" > "$MediumAppCountGFile"
    MediumAppCountN="0"
    echo "$MediumAppCountN" > "$MediumAppCountNFile"
    LowAppCountG="0"
    echo "$LowAppCountG" > "$LowAppCountGFile"
    LowAppCountN="0"
    echo "$LowAppCountN" > "$LowAppCountNFile"
    UndefAppCountG="0"
    echo "$UndefAppCountG" > "$UndefAppCountGFile"
    UndefAppCountN="0"
    echo "$UndefAppCountN" > "$UndefAppCountNFile"

}

function IncNetRiskcount() {
    # Example input string ":$AppNme:" "$LowAppListFile" "$LowAppCountN"
    App="$1"
    ListFile="$2"
    Ncount="$3"
    if ! [ -a "$ListFile" ] ; then                      # Does net risk file exist?
            echo "$App" > "$ListFile"                           # create file
            Ncount=$((Ncount + 1))                              # increment net count
        else if ! grep -q "$App" "$ListFile" ; then         # is App in File?
                echo "$App" >>  "$ListFile"                         # append it to list
                Ncount=$((Ncount + 1))                              # increment net count
        fi
    fi
    echo "$Ncount"                                      # return result to subshell
}

function SetRecordUpdateFlag() {
    if [[ "$1" != "" ]] ; then
            PkgUpDtStatus="$PckgUpDateClr"
        else
                PkgUpDtStatus="$PkgClr"
    fi
    echo "$PkgUpDtStatus"                   # Return value to subshell
}


function DrawAdvisoryTableFooter(){
    SentenceNoFormat="$SpChr""The $1 advisory can be found at: $PckgIssue$1"
    SentenceSize=${#SentenceNoFormat}
    LineEnd=$((LineLength-SentenceSize))
    BoxLine=$(DrawLine "$TbleWidth" "─")
    ### Top outline
    PrintFSpace
    PrintFLeftJunction
    printf "$BoxLine"
    PrintFRghtJunction
    PrintFNewline
    ### Text line
    PrintFSpace
    PrintFBoxEdge
    printf "$SpChr""The$SpChr"
    PrintFColour "$PkgClr" "$1$SpChr"
    printf "advisory can be found at:$SpChr"
    PrintFColour "$HypLnk" "$PckgIssue$1"
    printf '%'"$LineEnd"'s'
    PrintFBoxEdge
    PrintFNewline
    DrawBoxBottomLine
}

function ParseArchAudit() {
    # arch-audit piped to while loop
    arch-audit | \
    ( # Because of the  pipe, we need a sub shell to preserve variables for processing outside while loop
    while read PckgAdvisory; do
        UpDateFlag=""                                           # Will hold update string, if available
        PckgName=${PckgAdvisory%"$SpChr""is affected by "*}        # Chop string to isolate the package name
        PckgName=${PckgName#"Package "*}
        PckgRisk=${PckgAdvisory#*"is affected by "}        # bug fix for when pckgname has a number eg ffmepg2.8
        PckgRisk="$(echo $PckgRisk | cut -d'.' -f2)"
        if [[ "$PckgRisk" == *"$SpChr""Update to""$SpChr"* ]] ; then
            UpDateFlag=">>$(echo $PckgAdvisory | cut -d'!' -f2)"    # Create update string. (No update = empty string.)
            PckgRisk="$SpChr$(echo $PckgRisk | cut -d'!' -f1)!"     # Remove update string, if it exists, from $PckgRisk
        fi
        #
        #
        ### Note, the advisory counts,(*AdvisCount,) are handled entirely within one pass of this shell.
        AdvisCount=$((AdvisCount + 1))                  # Increment the count of advisories
        case $PckgRisk in                               # Assign $PkgUpDtStatus, $RskClr, PckgRsk, SortRisk and inc count
            "$SpChr""Low risk!")
                        RskClr=$LowRsk
                        LowAdvisCount=$((LowAdvisCount + 1))
                        AppRisk="Low"
                        PkgUpDtStatus="$(SetRecordUpdateFlag $UpDateFlag)"
                        PckgRecord=":$PckgName:$PkgUpDtStatus:$RskClr:Low Risk!:2:";;    # See below for explanation of PckgRecord fields
            "$SpChr""Medium risk!")
                        RskClr=$MedRsk
                        MediumAdvisCount=$((MediumAdvisCount + 1))
                        AppRisk="Medium"
                        PkgUpDtStatus="$(SetRecordUpdateFlag $UpDateFlag)"
                        PckgRecord=":$PckgName:$PkgUpDtStatus:$RskClr:Medium Risk!:3:";;
            "$SpChr""High risk!")
                        RskClr=$HighRsk
                        HighAdvisCount=$((HighAdvisCount + 1))
                        AppRisk="High"
                        PkgUpDtStatus="$(SetRecordUpdateFlag $UpDateFlag)"
                        PckgRecord=":$PckgName:$PkgUpDtStatus:$RskClr:High Risk!:4:";;
            "$SpChr""Critical risk!")
                        RskClr=$CrtclRsk
                        CrtclAdvisCount=$((CrtclAdvisCount + 1))
                        AppRisk="Critical"
                        PkgUpDtStatus="$(SetRecordUpdateFlag $UpDateFlag)"
                        PckgRecord=":$PckgName:$PkgUpDtStatus:$RskClr:Critical Risk!:5:";;
                            *)
                        RskClr=$UnDefRsk
                        UndefAdvisCount=$((UndefAdvisCount + 1))
                        AppRisk="UnDef"
                        PkgUpDtStatus="$(SetRecordUpdateFlag $UpDateFlag)"
                        PckgRecord=":$PckgName:$PkgUpDtStatus:$RskClr:Undefined Risk!:1:";;
        esac # End case statement
        echo
        echo -e "The following applications depend on $PkgUpDtStatus$PckgName$DefClr, which is rated $RskClr$PckgRisk $PkgUpDtStatus$UpDateFlag$DefClr"
        whoneeds $PckgName | \
            ( # Create second sub-shell to preserve variables for processing outside piped while loop
            GetTrueAppCounts # From file
            Column="0"
            PckgAppCount="0"  #keeps count of number of applications affected by package (cf AppCount)
            while read AppNme; do
                if [[ "$AppNme" == *"Packages that depend on"* ]] ; then
                        # We replaced whoneeds report intro. So, make pretty table header
                        DrawBoxTopLine
                    else
                            PckgAppCount=$((PckgAppCount + 1))                          # inc app count dependant on package
                            if ! [ -a "$AppListFile" ] ; then                           # 'AppListFile' doesn't exist?
                                    AppListRecord=":$AppNme:0:0:0:0:0"                      # Format = ':AppName:C:H:M:L:U'
                                    AppCount=$((AppCount + 1))                              # Increment 'net' AppCount
                                    echo "$AppListRecord" > "$AppListFile"                  # initialise "AppListFile"
                                else if ! grep -q ":$AppNme:" "$AppListFile" ; then       # AppNme record doesn't exists?
                                        AppListRecord=":$AppNme:0:0:0:0:0"                      # create field as above
                                        AppCount=$((AppCount + 1))                              # Increment 'net' AppCount
                                        echo "$AppListRecord" >> "$AppListFile"                 # append to "AppListFile"
                                fi
                            fi
                            ### Above we have made sure AppListFile exists and Appnme has a record,now we need the fields
                            ### Note1: As stated, first field is intentionaly empty
                            ### Note2: We already have the 2nd field 'AppNme'
                            AppListRecordOld=$(grep ":$AppNme:" "$AppListFile")             # get old AppNme record
                            AppFC="$(echo $AppListRecordOld | cut -d':' -f3)"               # Isolate the 3rd field
                            AppFH="$(echo $AppListRecordOld | cut -d':' -f4)"               # Isolate the 4th field
                            AppFM="$(echo $AppListRecordOld | cut -d':' -f5)"               # Isolate the 5th field
                            AppFL="$(echo $AppListRecordOld | cut -d':' -f6)"               # Isolate the 6th field
                            AppFU="$(echo $AppListRecordOld | cut -d':' -f7)"               # Isolate the 7th field
                            ###
                            case $AppRisk in    ### increment relevant counts
                                    "Low")
                                        AppFL=$((AppFL + 1))
                                        LowAppCountG=$((LowAppCountG + 1))
                                        LowAppCountN=$(IncNetRiskcount ":$AppNme:" "$LowAppListFile" "$LowAppCountN");;
                                 "Medium")
                                        AppFM=$((AppFM + 1))
                                        MediumAppCountG=$((MediumAppCountG + 1))
                                        MediumAppCountN=$(IncNetRiskcount ":$AppNme:" "$MediumAppListFile" "$MediumAppCountN");;
                                   "High")
                                        AppFH=$((AppFH + 1))
                                        HighAppCountG=$((HighAppCountG + 1))
                                        HighAppCountN=$(IncNetRiskcount ":$AppNme:" "$HighAppListFile" "$HighAppCountN");;
                               "Critical")
                                        AppFC=$((AppFC + 1))
                                        CrtclAppCountG=$((CrtclAppCountG + 1))
                                        CrtclAppCountN=$(IncNetRiskcount ":$AppNme:" "$CrtclAppListFile" "$CrtclAppCountN");;
                                  "UnDef")
                                        AppFU=$((AppFU + 1))
                                        UndefAppCountG=$((UndefAppCountG + 1))
                                        UndefAppCountN=$(IncNetRiskcount ":$AppNme:" "$UndefAppListFile" "$UndefAppCountN");;
                            esac # End case statement
                            ### Update record in AppListFile
                            AppListRecordNew=":$AppNme:$AppFC:$AppFH:$AppFM:$AppFL:$AppFU"
                            sed -i "s/$AppListRecordOld/$AppListRecordNew/g" "$AppListFile"
                            ###
                            #
                            ### Print out names of affected apps to stndout
                            Column=$((Column + 1))
                            if [[ "$Column" == "1" ]]; then
                                    PrintFSpace
                                    PrintFBoxEdge
                                    PrintFColour "$AppClr" "$SpChr$AppNme" '%-39s'
                                else if [[ "$Column" == "2" ]]; then
                                        PrintFColour "$AppClr" "$SpChr$AppNme" '%-38s'
                                    else
                                            PrintFColour "$AppClr" "$SpChr$AppNme" '%-39s'
                                            PrintFBoxEdge
                                            PrintFNewline
                                            Column="0"
                                fi
                            fi
                fi
            done
            if [[ "$Column" == "1" ]] ; then        # If the last row is incomplete, we need to finsh the row
                    printf '%77s'
                    PrintFBoxEdge
                    PrintFNewline
                else if [[ "$Column" == "2" ]] ; then
                        printf '%39s'
                        PrintFBoxEdge
                        PrintFNewline
                fi
            fi
            if [[ $PckgAppCount == "0" ]]; then     # Creates an empty table row when there is no affected applications
                DrawEmptyLine
            fi
            # PckgRecord consists of the fields ':PckgName:PkgUpDtStatus:RiskClr:PckgRsk:SortRisk:PckgAppCount'
            PckgRecord="$PckgRecord""$PckgAppCount"
            echo $PckgRecord >> "$PckgListFile"
            #
            SaveTrueAppCounts                       # Update the true *AppCounts while still inside second pipe
            )                                       # Close the second pipe.
        DrawAdvisoryTableFooter "$PckgName"
        echo
    done
    SaveTrueAdvisCount                              # Preserve the values for outside pipe sub-shell
    )                                               # close the first pipe
}

function StartWhoNeedsReport() {
    echo
    MakeTitleBox "WhoNeeds Report"
    ParseArchAudit
}

### ### ### ### ### ### ### ### ###  End functions ### ### ### ### ### ### ### ### ###



### ### ### ### ### ### ### ### ### Main ### ### ### ### ### ### ### ### ###
Information
InialiseCounters
TitleDate
StartWhoNeedsReport
ReportSummary
### ### ### ### ### ### ### ### ###  End ### ### ### ### ### ### ### ### ###
